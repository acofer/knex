// PostgreSQL Schema Compiler
// -------

'use strict';

exports.__esModule = true;

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }

var _inherits = require('inherits');

var _inherits2 = _interopRequireDefault(_inherits);

var _schemaCompiler = require('../../../schema/compiler');

var _schemaCompiler2 = _interopRequireDefault(_schemaCompiler);

function SchemaCompiler_PG() {
  _schemaCompiler2['default'].apply(this, arguments);
}
_inherits2['default'](SchemaCompiler_PG, _schemaCompiler2['default']);

// Check whether the current table
SchemaCompiler_PG.prototype.hasTable = function (tableName) {
  var sql = 'select * from information_schema.tables where table_name = ?';
  var bindings = [tableName];

  if (this.schema) {
    sql += ' and table_schema = ?';
    bindings.push(this.schema);
  } else {
    sql += ' and table_schema = current_schema()';
  }

  this.pushQuery({
    sql: sql,
    bindings: bindings,
    output: function output(resp) {
      return resp.rows.length > 0;
    }
  });
};

// Compile the query to determine if a column exists in a table.
SchemaCompiler_PG.prototype.hasColumn = function (tableName, columnName) {
  var sql = 'select * from information_schema.columns where table_name = ? and column_name = ?';
  var bindings = [tableName, columnName];

  if (this.schema) {
    sql += ' and table_schema = ?';
    bindings.push(this.schema);
  } else {
    sql += ' and table_schema = current_schema()';
  }

  this.pushQuery({
    sql: sql,
    bindings: bindings,
    output: function output(resp) {
      return resp.rows.length > 0;
    }
  });
};

SchemaCompiler_PG.prototype.qualifiedTableName = function (tableName) {
  var name = this.schema ? this.schema + '.' + tableName : tableName;
  return this.formatter.wrap(name);
};

// Compile a rename table command.
SchemaCompiler_PG.prototype.renameTable = function (from, to) {
  this.pushQuery('alter table ' + this.qualifiedTableName(from) + ' rename to ' + this.formatter.wrap(to));
};

SchemaCompiler_PG.prototype.createSchema = function (schemaName) {
  this.pushQuery('create schema ' + this.formatter.wrap(schemaName));
};

SchemaCompiler_PG.prototype.createSchemaIfNotExists = function (schemaName) {
  this.pushQuery('create schema if not exists ' + this.formatter.wrap(schemaName));
};

SchemaCompiler_PG.prototype.dropSchema = function (schemaName) {
  this.pushQuery('drop schema ' + this.formatter.wrap(schemaName));
};

SchemaCompiler_PG.prototype.dropSchemaIfExists = function (schemaName) {
  this.pushQuery('drop schema if exists ' + this.formatter.wrap(schemaName));
};

SchemaCompiler_PG.prototype.dropExtension = function (extensionName) {
  this.pushQuery('drop extension ' + this.formatter.wrap(extensionName));
};

SchemaCompiler_PG.prototype.dropExtensionIfExists = function (extensionName) {
  this.pushQuery('drop extension if exists ' + this.formatter.wrap(extensionName));
};

SchemaCompiler_PG.prototype.createExtension = function (extensionName) {
  this.pushQuery('create extension ' + this.formatter.wrap(extensionName));
};

SchemaCompiler_PG.prototype.createExtensionIfNotExists = function (extensionName) {
  this.pushQuery('create extension if not exists ' + this.formatter.wrap(extensionName));
};

exports['default'] = SchemaCompiler_PG;
module.exports = exports['default'];
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uL3NyYy9kaWFsZWN0cy9wb3N0Z3Jlcy9zY2hlbWEvY29tcGlsZXIuanMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7O3dCQUlxQixVQUFVOzs7OzhCQUNKLDBCQUEwQjs7OztBQUVyRCxTQUFTLGlCQUFpQixHQUFHO0FBQzNCLDhCQUFlLEtBQUssQ0FBQyxJQUFJLEVBQUUsU0FBUyxDQUFDLENBQUM7Q0FDdkM7QUFDRCxzQkFBUyxpQkFBaUIsOEJBQWlCLENBQUM7OztBQUc1QyxpQkFBaUIsQ0FBQyxTQUFTLENBQUMsUUFBUSxHQUFHLFVBQVMsU0FBUyxFQUFFO0FBQ3pELE1BQUksR0FBRyxHQUFHLDhEQUE4RCxDQUFDO0FBQ3pFLE1BQU0sUUFBUSxHQUFHLENBQUMsU0FBUyxDQUFDLENBQUM7O0FBRTdCLE1BQUksSUFBSSxDQUFDLE1BQU0sRUFBRTtBQUNmLE9BQUcsSUFBSSx1QkFBdUIsQ0FBQztBQUMvQixZQUFRLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxNQUFNLENBQUMsQ0FBQztHQUM1QixNQUFNO0FBQ0wsT0FBRyxJQUFJLHNDQUFzQyxDQUFDO0dBQy9DOztBQUVELE1BQUksQ0FBQyxTQUFTLENBQUM7QUFDYixPQUFHLEVBQUgsR0FBRztBQUNILFlBQVEsRUFBUixRQUFRO0FBQ1IsVUFBTSxFQUFBLGdCQUFDLElBQUksRUFBRTtBQUNYLGFBQU8sSUFBSSxDQUFDLElBQUksQ0FBQyxNQUFNLEdBQUcsQ0FBQyxDQUFDO0tBQzdCO0dBQ0YsQ0FBQyxDQUFDO0NBQ0osQ0FBQzs7O0FBR0YsaUJBQWlCLENBQUMsU0FBUyxDQUFDLFNBQVMsR0FBRyxVQUFTLFNBQVMsRUFBRSxVQUFVLEVBQUU7QUFDdEUsTUFBSSxHQUFHLEdBQUcsbUZBQW1GLENBQUM7QUFDOUYsTUFBTSxRQUFRLEdBQUcsQ0FBQyxTQUFTLEVBQUUsVUFBVSxDQUFDLENBQUM7O0FBRXpDLE1BQUksSUFBSSxDQUFDLE1BQU0sRUFBRTtBQUNmLE9BQUcs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LENBQUMsQ0FBRyxDQUFDO0NBQ3hGLENBQUM7O3FCQUVhLGlCQUFpQiIsImZpbGUiOiJjb21waWxlci5qcyIsInNvdXJjZXNDb250ZW50IjpbIi8vIFBvc3RncmVTUUwgU2NoZW1hIENvbXBpbGVyXG4vLyAtLS0tLS0tXG5cblxuaW1wb3J0IGluaGVyaXRzIGZyb20gJ2luaGVyaXRzJztcbmltcG9ydCBTY2hlbWFDb21waWxlciBmcm9tICcuLi8uLi8uLi9zY2hlbWEvY29tcGlsZXInO1xuXG5mdW5jdGlvbiBTY2hlbWFDb21waWxlcl9QRygpIHtcbiAgU2NoZW1hQ29tcGlsZXIuYXBwbHkodGhpcywgYXJndW1lbnRzKTtcbn1cbmluaGVyaXRzKFNjaGVtYUNvbXBpbGVyX1BHLCBTY2hlbWFDb21waWxlcik7XG5cbi8vIENoZWNrIHdoZXRoZXIgdGhlIGN1cnJlbnQgdGFibGVcblNjaGVtYUNvbXBpbGVyX1BHLnByb3RvdHlwZS5oYXNUYWJsZSA9IGZ1bmN0aW9uKHRhYmxlTmFtZSkge1xuICBsZXQgc3FsID0gJ3NlbGVjdCAqIGZyb20gaW5mb3JtYXRpb25fc2NoZW1hLnRhYmxlcyB3aGVyZSB0YWJsZV9uYW1lID0gPyc7XG4gIGNvbnN0IGJpbmRpbmdzID0gW3RhYmxlTmFtZV07XG5cbiAgaWYgKHRoaXMuc2NoZW1hKSB7XG4gICAgc3FsICs9ICcgYW5kIHRhYmxlX3NjaGVtYSA9ID8nO1xuICAgIGJpbmRpbmdzLnB1c2godGhpcy5zY2hlbWEpO1xuICB9IGVsc2Uge1xuICAgIHNxbCArPSAnIGFuZCB0YWJsZV9zY2hlbWEgPSBjdXJyZW50X3NjaGVtYSgpJztcbiAgfVxuXG4gIHRoaXMucHVzaFF1ZXJ5KHtcbiAgICBzcWwsXG4gICAgYmluZGluZ3MsXG4gICAgb3V0cHV0KHJlc3ApIHtcbiAgICAgIHJldHVybiByZXNwLnJvd3MubGVuZ3RoID4gMDtcbiAgICB9XG4gIH0pO1xufTtcblxuLy8gQ29tcGlsZSB0aGUgcXVlcnkgdG8gZGV0ZXJtaW5lIGlmIGEgY29sdW1uIGV4aXN0cyBpbiBhIHRhYmxlLlxuU2NoZW1hQ29tcGlsZXJfUEcucHJvdG90eXBlLmhhc0NvbHVtbiA9IGZ1bmN0aW9uKHRhYmxlTmFtZSwgY29sdW1uTmFtZSkge1xuICBsZXQgc3FsID0gJ3NlbGVjdCAqIGZyb20gaW5mb3JtYXRpb25fc2NoZW1hLmNvbHVtbnMgd2hlcmUgdGFibGVfbmFtZSA9ID8gYW5kIGNvbHVtbl9uYW1lID0gPyc7XG4gIGNvbnN0IGJpbmRpbmdzID0gW3RhYmxlTmFtZSwgY29sdW1uTmFtZV07XG5cbiAgaWYgKHRoaXMuc2NoZW1hKSB7XG4gICAgc3FsICs9ICcgYW5kIHRhYmxlX3NjaGVtYSA9ID8nO1xuICAgIGJpbmRpbmdzLnB1c2godGhpcy5zY2hlbWEpO1xuICB9IGVsc2Uge1xuICAgIHNxbCArPSAnIGFuZCB0YWJsZV9zY2hlbWEgPSBjdXJyZW50X3NjaGVtYSgpJztcbiAgfVxuXG4gIHRoaXMucHVzaFF1ZXJ5KHtcbiAgICBzcWwsXG4gICAgYmluZGluZ3MsXG4gICAgb3V0cHV0KHJlc3ApIHtcbiAgICAgIHJldHVybiByZXNwLnJvd3MubGVuZ3RoID4gMDtcbiAgICB9XG4gIH0pO1xufTtcblxuU2NoZW1hQ29tcGlsZXJfUEcucHJvdG90eXBlLnF1YWxpZmllZFRhYmxlTmFtZSA9IGZ1bmN0aW9uKHRhYmxlTmFtZSkge1xuICBjb25zdCBuYW1lID0gdGhpcy5zY2hlbWEgPyBgJHt0aGlzLnNjaGVtYX0uJHt0YWJsZU5hbWV9YCA6IHRhYmxlTmFtZTtcbiAgcmV0dXJuIHRoaXMuZm9ybWF0dGVyLndyYXAobmFtZSk7XG59O1xuXG4vLyBDb21waWxlIGEgcmVuYW1lIHRhYmxlIGNvbW1hbmQuXG5TY2hlbWFDb21waWxlcl9QRy5wcm90b3R5cGUucmVuYW1lVGFibGUgPSBmdW5jdGlvbihmcm9tLCB0bykge1xuICB0aGlzLnB1c2hRdWVyeShcbiAgICBgYWx0ZXIgdGFibGUgJHt0aGlzLnF1YWxpZmllZFRhYmxlTmFtZShmcm9tKX0gcmVuYW1lIHRvICR7dGhpcy5mb3JtYXR0ZXIud3JhcCh0byl9YFxuICApO1xufTtcblxuU2NoZW1hQ29tcGlsZXJfUEcucHJvdG90eXBlLmNyZWF0ZVNjaGVtYSA9IGZ1bmN0aW9uKHNjaGVtYU5hbWUpIHtcbiAgdGhpcy5wdXNoUXVlcnkoYGNyZWF0ZSBzY2hlbWEgJHt0aGlzLmZvcm1hdHRlci53cmFwKHNjaGVtYU5hbWUpfWApO1xufTtcblxuU2NoZW1hQ29tcGlsZXJfUEcucHJvdG90eXBlLmNyZWF0ZVNjaGVtYUlmTm90RXhpc3RzID0gZnVuY3Rpb24oc2NoZW1hTmFtZSkge1xuICB0aGlzLnB1c2hRdWVyeShgY3JlYXRlIHNjaGVtYSBpZiBub3QgZXhpc3RzICR7dGhpcy5mb3JtYXR0ZXIud3JhcChzY2hlbWFOYW1lKX1gKTtcbn07XG5cblNjaGVtYUNvbXBpbGVyX1BHLnByb3RvdHlwZS5kcm9wU2NoZW1hID0gZnVuY3Rpb24oc2NoZW1hTmFtZSkge1xuICB0aGlzLnB1c2hRdWVyeShgZHJvcCBzY2hlbWEgJHt0aGlzLmZvcm1hdHRlci53cmFwKHNjaGVtYU5hbWUpfWApO1xufTtcblxuU2NoZW1hQ29tcGlsZXJfUEcucHJvdG90eXBlLmRyb3BTY2hlbWFJZkV4aXN0cyA9IGZ1bmN0aW9uKHNjaGVtYU5hbWUpIHtcbiAgdGhpcy5wdXNoUXVlcnkoYGRyb3Agc2NoZW1hIGlmIGV4aXN0cyAke3RoaXMuZm9ybWF0dGVyLndyYXAoc2NoZW1hTmFtZSl9YCk7XG59O1xuXG5TY2hlbWFDb21waWxlcl9QRy5wcm90b3R5cGUuZHJvcEV4dGVuc2lvbiA9IGZ1bmN0aW9uKGV4dGVuc2lvbk5hbWUpIHtcbiAgdGhpcy5wdXNoUXVlcnkoYGRyb3AgZXh0ZW5zaW9uICR7dGhpcy5mb3JtYXR0ZXIud3JhcChleHRlbnNpb25OYW1lKX1gKTtcbn07XG5cblNjaGVtYUNvbXBpbGVyX1BHLnByb3RvdHlwZS5kcm9wRXh0ZW5zaW9uSWZFeGlzdHMgPSBmdW5jdGlvbihleHRlbnNpb25OYW1lKSB7XG4gIHRoaXMucHVzaFF1ZXJ5KGBkcm9wIGV4dGVuc2lvbiBpZiBleGlzdHMgJHt0aGlzLmZvcm1hdHRlci53cmFwKGV4dGVuc2lvbk5hbWUpfWApO1xufTtcblxuU2NoZW1hQ29tcGlsZXJfUEcucHJvdG90eXBlLmNyZWF0ZUV4dGVuc2lvbiA9IGZ1bmN0aW9uKGV4dGVuc2lvbk5hbWUpIHtcbiAgdGhpcy5wdXNoUXVlcnkoYGNyZWF0ZSBleHRlbnNpb24gJHt0aGlzLmZvcm1hdHRlci53cmFwKGV4dGVuc2lvbk5hbWUpfWApO1xufTtcblxuU2NoZW1hQ29tcGlsZXJfUEcucHJvdG90eXBlLmNyZWF0ZUV4dGVuc2lvbklmTm90RXhpc3RzID0gZnVuY3Rpb24oZXh0ZW5zaW9uTmFtZSkge1xuICB0aGlzLnB1c2hRdWVyeShgY3JlYXRlIGV4dGVuc2lvbiBpZiBub3QgZXhpc3RzICR7dGhpcy5mb3JtYXR0ZXIud3JhcChleHRlbnNpb25OYW1lKX1gKTtcbn07XG5cbmV4cG9ydCBkZWZhdWx0IFNjaGVtYUNvbXBpbGVyX1BHO1xuIl19